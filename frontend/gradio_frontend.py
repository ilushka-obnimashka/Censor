import mimetypes
import os
import traceback

import gradio as gr
import requests

from frontend_config import CATEGORIES
from utils import minio_client

API_URL = os.getenv("API_URL")


def get_selected_categories(checkboxes_main, checkboxes_sub):
    selected = []

    for main_cat, checkbox in checkboxes_main.items():
        if checkbox.value:  # –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            sub = CATEGORIES[main_cat]
            if isinstance(sub, dict):  # –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for label, code in sub.items():
                    if checkboxes_sub[main_cat][label].value:
                        selected.append(code)
            else:  # –æ–¥–∏–Ω–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                selected.append(sub)

    return selected


def process_via_api(file_path, selected_classes, pixelation):
    try:
        key = minio_client.upload_file('uploads', file_path)
        print(selected_classes)

        # API
        response = requests.post(
            API_URL,
            json={
                "key": key,
                "black_list": selected_classes,
                "pixelation": pixelation
            }
        )

        if response.status_code != 200:
            return None, f"–û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}"

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ MinIO
        result_key = response.json()["result_key"]
        result_path = minio_client.download_file('uploads', result_key, 'result')

        # –£–¥–∞–ª—è–µ–º –∏–∑ minio

        return gr.update(value=result_path, visible=True), "–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"

    except Exception as e:
        raise f"–û—à–∏–±–∫–∞: {traceback.format_exc()}"


def update_preview(file_path):
    try:
        if file_path is None:
            return (
                gr.update(visible=False),  # output_file
                gr.update(value=None, visible=False),  # video
                gr.update(value=None, visible=False),  # image
                gr.update(value=None, visible=False),  # audio
                gr.update(value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏! üòä", visible=True)
            )

        show_video = gr.update(value=None, visible=False)
        show_image = gr.update(value=None, visible=False)
        show_audio = gr.update(value=None, visible=False)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º mime —Ç–∏–ø
        mime_type, _ = mimetypes.guess_type(file_path)
        if mime_type:
            if mime_type.startswith("video"):
                show_video = gr.update(value=file_path, visible=True)
            elif mime_type.startswith("image"):
                show_image = gr.update(value=file_path, visible=True)
            elif mime_type.startswith("audio"):
                show_audio = gr.update(value=file_path, visible=True)
        return file_path, show_video, show_image, show_audio, gr.update(visible=False)

    except Exception as e:
        print(f"update_preview: {traceback.format_exc()}")
        return None, None, None, None, None

def main():
    custom_theme = gr.themes.Default(primary_hue="pink")

    with gr.Blocks(theme=custom_theme) as demo:
        gr.Markdown("## ACMS Censor <sub>v0.0.1-alpha</sub>")

        with gr.Row(equal_height=True):
            with gr.Column():
                input_file = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–æ—Ç–æ", file_types=["video", "audio", "image"])
                output_file = gr.File(label="–°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", visible=False)
            with gr.Column():
                output_view_video = gr.Video(label="–ü—Ä–æ—Å–º–æ—Ç—Ä", visible=False)
                output_view_image = gr.Image(label="–ü—Ä–æ—Å–º–æ—Ç—Ä", visible=False)
                output_view_audio = gr.Audio(label="–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ", visible=False)
                status_text = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏! üòä", visible=True)

        with gr.Row(equal_height=True):
            pixelation_checkbox = gr.Checkbox(label="–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è (–∏–Ω–∞—á–µ ‚Äî –±–æ–∫—Å—ã)", value=True)
            process_button = gr.Button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å")

        checkboxes_main = {}
        checkboxes_sub = {}
        sub_blocks = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        with gr.Row():
            for cat in CATEGORIES:
                checkboxes_main[cat] = gr.Checkbox(label=cat)

        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat, sub in CATEGORIES.items():
            if isinstance(sub, dict) and len(sub) > 1:
                checkboxes_sub[cat] = {}
                with gr.Column(visible=False) as block:
                    gr.Markdown(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ ¬´{cat}¬ª:")
                    for label in sub:
                        checkboxes_sub[cat][label] = gr.Checkbox(label=label, value=True)
                sub_blocks[cat] = block

        # –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–±–ª–æ–∫–æ–≤
        for cat in sub_blocks:
            checkboxes_main[cat].change(
                lambda checked: gr.update(visible=checked),
                inputs=checkboxes_main[cat],
                outputs=sub_blocks[cat]
            )

        process_button.click(
            fn=lambda file, pixel, *args: process_via_api(file.name, get_selected_categories(checkboxes_main, checkboxes_sub), pixel),
            inputs=[input_file, pixelation_checkbox] +
                   list(checkboxes_main.values()) +
                   [cb for group in checkboxes_sub.values() for cb in group.values()],
            outputs=[output_file, status_text]
        )

        output_file.change(
            fn=update_preview,
            inputs=output_file,
            outputs=[
                output_file,
                output_view_video,
                output_view_image,
                output_view_audio,
                status_text
            ]
        )

    demo.launch(server_name="0.0.0.0", server_port=7860)

if __name__ == "__main__":
    main()